package gui;


import java.net.InetAddress;
import java.net.URL;
import java.util.ArrayList;
import java.util.ResourceBundle;

import client.ChatClient;
import client.ClientController;
import client.ClientUI;
import javafx.application.Platform;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.ComboBox;
import javafx.scene.control.Label;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.TextField;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.Pane;
import javafx.scene.paint.Color;
import javafx.stage.Stage;
import logic.Message;
import logic.Order;
import logic.Request;
import logic.User;
import logic.WaitingListEntry;
import mysqlConnection.mysqlConnection;
/**
 * This class controls the approval process for requests in the Department Manager interface.
 * It handles actions such as accepting or rejecting requests and updating the UI accordingly.
 * Implements the Initializable interface for FXML initialization.
 * <p>Author: [Jolian Abdo]</p>
 */
public class DepartmentManagerApprovalController implements Initializable {
	   /** Static ClientController for chat functionality */
    public static ClientController chat;

    @FXML
    private Button btnReject, btnAccept, btnBack;
    @FXML
    private Label lblError;
    @FXML
    private TableView<Request> requestsTable;
    @FXML
    private TableColumn<Request, String> columnParkName, columnReservedCapacity, columnTotalCapacity, columnMaxStay;

    /**
     * Accepts the selected request.
     * @param event The ActionEvent generated by the user's click.
     * @throws Exception If an error occurs during request acceptance.
     */
    public void accept(ActionEvent event) throws Exception {
        Request selectedRequest = requestsTable.getSelectionModel().getSelectedItem();
        if (selectedRequest != null) {
            selectedRequest.setStatus("approved");
            Message msg = new Message(Message.ActionType.APPROVEREQUEST, selectedRequest);
            ClientUI.chat.accept(msg);
            requestsTable.getItems().remove(selectedRequest);
            lblError.setText("Request approved successfully");
            lblError.setTextFill(Color.GREEN);
        } else {
            lblError.setText("Please choose a request before approving");
            lblError.setTextFill(Color.RED);
        }
    }

    /**
     * Rejects the selected request.
     * @param event The ActionEvent generated by the user's click.
     * @throws Exception If an error occurs during request rejection.
     */
    public void reject(ActionEvent event) throws Exception {
        Request selectedRequest = requestsTable.getSelectionModel().getSelectedItem();
        if (selectedRequest != null) {
            selectedRequest.setStatus("rejected");
            Message msg = new Message(Message.ActionType.REJECTREQUEST, selectedRequest);
            ClientUI.chat.accept(msg);
            requestsTable.getItems().remove(selectedRequest);
            lblError.setText("Request rejected successfully");
            lblError.setTextFill(Color.GREEN);
        } else {
            lblError.setText("Please choose a request before rejecting");
            lblError.setTextFill(Color.RED);
        }
    }

    /**
     * Updates the waiting list table with the provided list of requests.
     * @param requests The list of requests to be displayed in the table.
     */
    public void updateWaitingListTable(ArrayList<Request> requests) {
        ObservableList<Request> data = FXCollections.observableArrayList(requests);
        requestsTable.setItems(data);
        columnParkName.setCellValueFactory(new PropertyValueFactory<>("parkName"));
        columnReservedCapacity.setCellValueFactory(new PropertyValueFactory<>("reservedCapacity"));
        columnTotalCapacity.setCellValueFactory(new PropertyValueFactory<>("totalCapacity"));
        columnMaxStay.setCellValueFactory(new PropertyValueFactory<>("maxStay"));
    }

    /**
     * Handles the action event when the user clicks the "Go Back" button.
     * @param event The ActionEvent generated by the user's click.
     * @throws Exception If an error occurs during navigation to the home page.
     */
    public void goBackBtn(ActionEvent event) throws Exception {
        ChatClient.openGUI.goToGUI(event, "/gui/DepartmentManagerHomePage.fxml", "/gui/DepartmentManagerHomePage.fxml", "Department Manager home page");
    }

    /**
     * Initializes the controller and sets up the GUI components.
     * @param arg0 The location of the FXML file.
     * @param arg1 The resources to be used to localize the root object.
     */
    @Override
    public void initialize(URL arg0, ResourceBundle arg1) {
        updateWaitingListTable(ChatClient.requests);
    }
}