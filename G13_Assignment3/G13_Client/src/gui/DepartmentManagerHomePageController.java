
package gui;

import java.io.IOException;
import java.io.PrintWriter;
import java.net.InetAddress;
import java.net.Socket;
import java.net.URL;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.ResourceBundle;

import client.ChatClient;
import client.ClientController;
import client.ClientUI;
import common.ChatIF;
import javafx.collections.FXCollections;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Parent;
import javafx.scene.Node;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.ComboBox;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.scene.layout.Pane;
import javafx.scene.paint.Color;
import javafx.stage.Stage;
import logic.Message;
import logic.Report;
import logic.User;
import ocsf.server.ConnectionToClient;




/**
 * This class controls the Department Manager Home Page interface.
 * It handles actions such as navigating to approval pages, creating reports, viewing reports, and logging out.
 * Implements the Initializable interface for FXML initialization.
 * <p>Author: [Noor Khateeb]</p>
 */
public class DepartmentManagerHomePageController implements Initializable {
    /** Static ClientController for chat functionality */
    public static ClientController chat;

    /** Static variable for item index */
    private static int itemIndex = 3;

    /** Static User object representing the current user */
    public static User user;

    /** Static Report object */
    public static Report report;

    @FXML
    private Label lblError;

    @FXML
    private ComboBox<String> cmbSelectPark, cmbReportType, cmbReportMonth, cmbReportYear;

    /**
     * Navigates to the Department Manager Approval page.
     * @param event The ActionEvent generated by the user's click.
     * @throws Exception If an error occurs during navigation.
     */
    public void goApproveCapacity(ActionEvent event) throws Exception {
        Message msg = new Message(Message.ActionType.REQUESTSTABLE, "");
        ClientUI.chat.accept(msg);
        ChatClient.openGUI.goToGUI(event, "/gui/DepartmentManagerApproval.fxml", "/gui/DepartmentManagerApproval.css", "Department Management Tool");
    }

    /**
     * Navigates to the Report Creation page.
     * @param event The ActionEvent generated by the user's click.
     * @throws Exception If an error occurs during navigation.
     */
    public void goCreateReport(ActionEvent event) throws Exception {
        ChatClient.openGUI.goToGUI(event, "/gui/ParkManagerHomePage.fxml", "", "Report creation page");
    }

    /**
     * Navigates to the Report View page based on the selected report type.
     * @param event The ActionEvent generated by the user's click.
     * @throws Exception If an error occurs during navigation.
     */
    public void goViewReport(ActionEvent event) throws Exception {
        Message msg;
        String reportType = cmbReportType.getValue().toString();
        Report report = new Report(reportType, cmbSelectPark.getValue().toString(), cmbReportMonth.getValue().toString(), cmbReportYear.getValue().toString());
        setReport(report);
        msg = new Message(Message.ActionType.REPORTINFO, report);
        ClientUI.chat.accept(msg);
        if (ChatClient.error.equals("")) {
            if (reportType.contains("Total visitors") || reportType.contains("Cancellation"))
                ChatClient.openGUI.goToGUI(event, "/gui/CancellationReport.fxml", "", "Report view page");
            else if (reportType.contains("Usage"))
                ChatClient.openGUI.goToGUI(event, "/gui/UsageVisitingReport.fxml", "", "Report view page");
            else
                ChatClient.openGUI.goToGUI(event, "/gui/VisitingReport.fxml", "", "Report view page");
        } else {
            lblError.setText(ChatClient.error);
            lblError.setTextFill(Color.RED);
        }
    }

    /**
     * Sets the current report.
     * @param report The report to be set.
     */
    public void setReport(Report report) {
        this.report = report;
    }

    /**
     * Retrieves the current report.
     * @return The current report.
     */
    public static Report getReport() {
        return report;
    }

    /**
     * Logs out the user and navigates to the login page.
     * @param event The ActionEvent generated by the user's click.
     * @throws Exception If an error occurs during logout.
     */
    public void Logout(ActionEvent event) throws Exception {
        Message msg = new Message(Message.ActionType.LOGOUT, user);
        ClientUI.chat.accept(msg);
        ChatClient.openGUI.goToGUI(event, "/gui/LoginWithoutPassword.fxml", "/gui/LoginWithoutPassword.css", "Visitor login page");
    }

    /**
     * Initializes the controller and sets up the GUI components.
     * @param arg0 The location of the FXML file.
     * @param arg1 The resources to be used to localize the root object.
     */
    @Override
    public void initialize(URL arg0, ResourceBundle arg1) {
        user = ChatClient.user;
        List<String> reportTypes = new ArrayList<>();
        reportTypes.add("Total visitors report");
        reportTypes.add("Usage report");
        reportTypes.add("Cancellation report");
        reportTypes.add("Visits report");
        this.cmbReportType.setValue("Report type");
        this.cmbReportType.setItems(FXCollections.observableArrayList(reportTypes));
        this.cmbSelectPark.setValue("Park name");
        this.cmbSelectPark.setItems(FXCollections.observableArrayList(ChatClient.parkNames));
        this.cmbReportMonth.setValue("Month");
        this.cmbReportMonth.setItems(FXCollections.observableArrayList(ChatClient.months));
        this.cmbReportYear.setValue("Year");
        this.cmbReportYear.setItems(FXCollections.observableArrayList(ChatClient.years));
    }
}